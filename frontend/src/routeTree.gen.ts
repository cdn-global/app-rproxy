/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RecoverPasswordImport } from './routes/recover-password'
import { Route as LoginImport } from './routes/login'
import { Route as ActivateImport } from './routes/activate'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'
import { Route as LayoutItemsImport } from './routes/_layout/items'
import { Route as LayoutAdminImport } from './routes/_layout/admin'
import { Route as LayoutHostingIndexImport } from './routes/_layout/hosting/index'
import { Route as LayoutWebScrapingToolsUserAgentsImport } from './routes/_layout/web-scraping-tools/user-agents'
import { Route as LayoutWebScrapingToolsSerpApiImport } from './routes/_layout/web-scraping-tools/serp-api'
import { Route as LayoutWebScrapingToolsHttpsApiImport } from './routes/_layout/web-scraping-tools/https-api'
import { Route as LayoutHostingBillingImport } from './routes/_layout/hosting/billing'
import { Route as LayoutHostingDeviceNameImport } from './routes/_layout/hosting/$deviceName'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordRoute = ResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RecoverPasswordRoute = RecoverPasswordImport.update({
  id: '/recover-password',
  path: '/recover-password',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ActivateRoute = ActivateImport.update({
  id: '/activate',
  path: '/activate',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutItemsRoute = LayoutItemsImport.update({
  id: '/items',
  path: '/items',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAdminRoute = LayoutAdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutHostingIndexRoute = LayoutHostingIndexImport.update({
  id: '/hosting/',
  path: '/hosting/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutWebScrapingToolsUserAgentsRoute =
  LayoutWebScrapingToolsUserAgentsImport.update({
    id: '/web-scraping-tools/user-agents',
    path: '/web-scraping-tools/user-agents',
    getParentRoute: () => LayoutRoute,
  } as any)

const LayoutWebScrapingToolsSerpApiRoute =
  LayoutWebScrapingToolsSerpApiImport.update({
    id: '/web-scraping-tools/serp-api',
    path: '/web-scraping-tools/serp-api',
    getParentRoute: () => LayoutRoute,
  } as any)

const LayoutWebScrapingToolsHttpsApiRoute =
  LayoutWebScrapingToolsHttpsApiImport.update({
    id: '/web-scraping-tools/https-api',
    path: '/web-scraping-tools/https-api',
    getParentRoute: () => LayoutRoute,
  } as any)

const LayoutHostingBillingRoute = LayoutHostingBillingImport.update({
  id: '/hosting/billing',
  path: '/hosting/billing',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutHostingDeviceNameRoute = LayoutHostingDeviceNameImport.update({
  id: '/hosting/$deviceName',
  path: '/hosting/$deviceName',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/activate': {
      id: '/activate'
      path: '/activate'
      fullPath: '/activate'
      preLoaderRoute: typeof ActivateImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/recover-password': {
      id: '/recover-password'
      path: '/recover-password'
      fullPath: '/recover-password'
      preLoaderRoute: typeof RecoverPasswordImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_layout/admin': {
      id: '/_layout/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof LayoutAdminImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/items': {
      id: '/_layout/items'
      path: '/items'
      fullPath: '/items'
      preLoaderRoute: typeof LayoutItemsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/hosting/$deviceName': {
      id: '/_layout/hosting/$deviceName'
      path: '/hosting/$deviceName'
      fullPath: '/hosting/$deviceName'
      preLoaderRoute: typeof LayoutHostingDeviceNameImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/hosting/billing': {
      id: '/_layout/hosting/billing'
      path: '/hosting/billing'
      fullPath: '/hosting/billing'
      preLoaderRoute: typeof LayoutHostingBillingImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/web-scraping-tools/https-api': {
      id: '/_layout/web-scraping-tools/https-api'
      path: '/web-scraping-tools/https-api'
      fullPath: '/web-scraping-tools/https-api'
      preLoaderRoute: typeof LayoutWebScrapingToolsHttpsApiImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/web-scraping-tools/serp-api': {
      id: '/_layout/web-scraping-tools/serp-api'
      path: '/web-scraping-tools/serp-api'
      fullPath: '/web-scraping-tools/serp-api'
      preLoaderRoute: typeof LayoutWebScrapingToolsSerpApiImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/web-scraping-tools/user-agents': {
      id: '/_layout/web-scraping-tools/user-agents'
      path: '/web-scraping-tools/user-agents'
      fullPath: '/web-scraping-tools/user-agents'
      preLoaderRoute: typeof LayoutWebScrapingToolsUserAgentsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/hosting/': {
      id: '/_layout/hosting/'
      path: '/hosting'
      fullPath: '/hosting'
      preLoaderRoute: typeof LayoutHostingIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutAdminRoute: typeof LayoutAdminRoute
  LayoutItemsRoute: typeof LayoutItemsRoute
  LayoutSettingsRoute: typeof LayoutSettingsRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutHostingDeviceNameRoute: typeof LayoutHostingDeviceNameRoute
  LayoutHostingBillingRoute: typeof LayoutHostingBillingRoute
  LayoutWebScrapingToolsHttpsApiRoute: typeof LayoutWebScrapingToolsHttpsApiRoute
  LayoutWebScrapingToolsSerpApiRoute: typeof LayoutWebScrapingToolsSerpApiRoute
  LayoutWebScrapingToolsUserAgentsRoute: typeof LayoutWebScrapingToolsUserAgentsRoute
  LayoutHostingIndexRoute: typeof LayoutHostingIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAdminRoute: LayoutAdminRoute,
  LayoutItemsRoute: LayoutItemsRoute,
  LayoutSettingsRoute: LayoutSettingsRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutHostingDeviceNameRoute: LayoutHostingDeviceNameRoute,
  LayoutHostingBillingRoute: LayoutHostingBillingRoute,
  LayoutWebScrapingToolsHttpsApiRoute: LayoutWebScrapingToolsHttpsApiRoute,
  LayoutWebScrapingToolsSerpApiRoute: LayoutWebScrapingToolsSerpApiRoute,
  LayoutWebScrapingToolsUserAgentsRoute: LayoutWebScrapingToolsUserAgentsRoute,
  LayoutHostingIndexRoute: LayoutHostingIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/activate': typeof ActivateRoute
  '/login': typeof LoginRoute
  '/recover-password': typeof RecoverPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/admin': typeof LayoutAdminRoute
  '/items': typeof LayoutItemsRoute
  '/settings': typeof LayoutSettingsRoute
  '/': typeof LayoutIndexRoute
  '/hosting/$deviceName': typeof LayoutHostingDeviceNameRoute
  '/hosting/billing': typeof LayoutHostingBillingRoute
  '/web-scraping-tools/https-api': typeof LayoutWebScrapingToolsHttpsApiRoute
  '/web-scraping-tools/serp-api': typeof LayoutWebScrapingToolsSerpApiRoute
  '/web-scraping-tools/user-agents': typeof LayoutWebScrapingToolsUserAgentsRoute
  '/hosting': typeof LayoutHostingIndexRoute
}

export interface FileRoutesByTo {
  '/activate': typeof ActivateRoute
  '/login': typeof LoginRoute
  '/recover-password': typeof RecoverPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/admin': typeof LayoutAdminRoute
  '/items': typeof LayoutItemsRoute
  '/settings': typeof LayoutSettingsRoute
  '/': typeof LayoutIndexRoute
  '/hosting/$deviceName': typeof LayoutHostingDeviceNameRoute
  '/hosting/billing': typeof LayoutHostingBillingRoute
  '/web-scraping-tools/https-api': typeof LayoutWebScrapingToolsHttpsApiRoute
  '/web-scraping-tools/serp-api': typeof LayoutWebScrapingToolsSerpApiRoute
  '/web-scraping-tools/user-agents': typeof LayoutWebScrapingToolsUserAgentsRoute
  '/hosting': typeof LayoutHostingIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/activate': typeof ActivateRoute
  '/login': typeof LoginRoute
  '/recover-password': typeof RecoverPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/_layout/admin': typeof LayoutAdminRoute
  '/_layout/items': typeof LayoutItemsRoute
  '/_layout/settings': typeof LayoutSettingsRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/hosting/$deviceName': typeof LayoutHostingDeviceNameRoute
  '/_layout/hosting/billing': typeof LayoutHostingBillingRoute
  '/_layout/web-scraping-tools/https-api': typeof LayoutWebScrapingToolsHttpsApiRoute
  '/_layout/web-scraping-tools/serp-api': typeof LayoutWebScrapingToolsSerpApiRoute
  '/_layout/web-scraping-tools/user-agents': typeof LayoutWebScrapingToolsUserAgentsRoute
  '/_layout/hosting/': typeof LayoutHostingIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/activate'
    | '/login'
    | '/recover-password'
    | '/reset-password'
    | '/signup'
    | '/admin'
    | '/items'
    | '/settings'
    | '/'
    | '/hosting/$deviceName'
    | '/hosting/billing'
    | '/web-scraping-tools/https-api'
    | '/web-scraping-tools/serp-api'
    | '/web-scraping-tools/user-agents'
    | '/hosting'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/activate'
    | '/login'
    | '/recover-password'
    | '/reset-password'
    | '/signup'
    | '/admin'
    | '/items'
    | '/settings'
    | '/'
    | '/hosting/$deviceName'
    | '/hosting/billing'
    | '/web-scraping-tools/https-api'
    | '/web-scraping-tools/serp-api'
    | '/web-scraping-tools/user-agents'
    | '/hosting'
  id:
    | '__root__'
    | '/_layout'
    | '/activate'
    | '/login'
    | '/recover-password'
    | '/reset-password'
    | '/signup'
    | '/_layout/admin'
    | '/_layout/items'
    | '/_layout/settings'
    | '/_layout/'
    | '/_layout/hosting/$deviceName'
    | '/_layout/hosting/billing'
    | '/_layout/web-scraping-tools/https-api'
    | '/_layout/web-scraping-tools/serp-api'
    | '/_layout/web-scraping-tools/user-agents'
    | '/_layout/hosting/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  ActivateRoute: typeof ActivateRoute
  LoginRoute: typeof LoginRoute
  RecoverPasswordRoute: typeof RecoverPasswordRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  ActivateRoute: ActivateRoute,
  LoginRoute: LoginRoute,
  RecoverPasswordRoute: RecoverPasswordRoute,
  ResetPasswordRoute: ResetPasswordRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/activate",
        "/login",
        "/recover-password",
        "/reset-password",
        "/signup"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/admin",
        "/_layout/items",
        "/_layout/settings",
        "/_layout/",
        "/_layout/hosting/$deviceName",
        "/_layout/hosting/billing",
        "/_layout/web-scraping-tools/https-api",
        "/_layout/web-scraping-tools/serp-api",
        "/_layout/web-scraping-tools/user-agents",
        "/_layout/hosting/"
      ]
    },
    "/activate": {
      "filePath": "activate.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/recover-password": {
      "filePath": "recover-password.tsx"
    },
    "/reset-password": {
      "filePath": "reset-password.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_layout/admin": {
      "filePath": "_layout/admin.tsx",
      "parent": "/_layout"
    },
    "/_layout/items": {
      "filePath": "_layout/items.tsx",
      "parent": "/_layout"
    },
    "/_layout/settings": {
      "filePath": "_layout/settings.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/hosting/$deviceName": {
      "filePath": "_layout/hosting/$deviceName.tsx",
      "parent": "/_layout"
    },
    "/_layout/hosting/billing": {
      "filePath": "_layout/hosting/billing.tsx",
      "parent": "/_layout"
    },
    "/_layout/web-scraping-tools/https-api": {
      "filePath": "_layout/web-scraping-tools/https-api.tsx",
      "parent": "/_layout"
    },
    "/_layout/web-scraping-tools/serp-api": {
      "filePath": "_layout/web-scraping-tools/serp-api.tsx",
      "parent": "/_layout"
    },
    "/_layout/web-scraping-tools/user-agents": {
      "filePath": "_layout/web-scraping-tools/user-agents.tsx",
      "parent": "/_layout"
    },
    "/_layout/hosting/": {
      "filePath": "_layout/hosting/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
